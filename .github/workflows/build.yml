name: Build and deploy image

on:
  push:
    branches:
      - "master"
  workflow_dispatch:

env:
  IMAGE_NAME: ${{ github.repository }}-${{github.ref_name}}
  SSH_AUTH_SOCK: /tmp/ssh_agent.sock

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up variables
        run: echo "SAFE_FILENAME=$(echo '${{ env.IMAGE_NAME }}' | tr '/:' '-')" >> $GITHUB_ENV

      - name: Set up SSH with password
        run: |
          mkdir -p ~/.ssh
          
          # Start ssh-agent
          ssh-agent -a ${{ env.SSH_AUTH_SOCK }} > /dev/null
          
          # Create askpass script
          echo 'echo "${{ secrets.SSH_KEY_PASSWORD }}"' > ~/.ssh_askpass && chmod +x ~/.ssh_askpass
          
          # Add the key with passphrase
          echo "${{ secrets.SSH_PRIVATE_KEY }}" | tr -d '\r' | DISPLAY=None SSH_ASKPASS=~/.ssh_askpass ssh-add - >/dev/null
          
          # Add host to known hosts
          ssh-keyscan -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Build Docker image
        run: |
          docker build \
            -t ${{ env.IMAGE_NAME }}:latest \
            .
          
          # Export the image to a file
          docker save ${{ env.IMAGE_NAME }}:latest | gzip > ${{ env.SAFE_FILENAME }}.tar.gz

      - name: Transfer and load image
        run: |
          # Transfer the image
          scp -P ${{ secrets.SSH_PORT }} "${{ env.SAFE_FILENAME }}.tar.gz" ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:~/
          
          # Load the image and clean up
          ssh -p ${{ secrets.SSH_PORT }} ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }} "
            docker load < ~/${{ env.SAFE_FILENAME }}.tar.gz && \
            rm ~/${{ env.SAFE_FILENAME }}.tar.gz
          "

      - name: Trigger deploy
        run: |
          curl -X POST https://api.github.com/repos/${{ secrets.DOCKER_REPO }}/dispatches \
          -H 'Accept: application/vnd.github.everest-preview+json' \
          -u ${{ secrets.ACTIONS_PAT }} \
          --data '{"event_type": "deploy", "client_payload": { "type": "backend" }}'